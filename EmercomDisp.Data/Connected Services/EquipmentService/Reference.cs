//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmercomDisp.Data.EquipmentService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EquipmentDto", Namespace="http://schemas.datacontract.org/2004/07/EmercomDisp.Service.Dto.Models")]
    [System.SerializableAttribute()]
    public partial class EquipmentDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/EmercomDisp.Service.Dto.Models")]
    [System.SerializableAttribute()]
    public partial class ConnectionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EquipmentService.IEquipmentService")]
    public interface IEquipmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/GetEquipment", ReplyAction="http://tempuri.org/IEquipmentService/GetEquipmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmercomDisp.Data.EquipmentService.ConnectionFault), Action="http://tempuri.org/IEquipmentService/GetEquipmentConnectionFaultFault", Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/EmercomDisp.Service.Dto.Models")]
        EmercomDisp.Data.EquipmentService.EquipmentDto[] GetEquipment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/GetEquipment", ReplyAction="http://tempuri.org/IEquipmentService/GetEquipmentResponse")]
        System.Threading.Tasks.Task<EmercomDisp.Data.EquipmentService.EquipmentDto[]> GetEquipmentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/GetEquipmentById", ReplyAction="http://tempuri.org/IEquipmentService/GetEquipmentByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmercomDisp.Data.EquipmentService.ConnectionFault), Action="http://tempuri.org/IEquipmentService/GetEquipmentByIdConnectionFaultFault", Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/EmercomDisp.Service.Dto.Models")]
        EmercomDisp.Data.EquipmentService.EquipmentDto GetEquipmentById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/GetEquipmentById", ReplyAction="http://tempuri.org/IEquipmentService/GetEquipmentByIdResponse")]
        System.Threading.Tasks.Task<EmercomDisp.Data.EquipmentService.EquipmentDto> GetEquipmentByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/CreateEquipment", ReplyAction="http://tempuri.org/IEquipmentService/CreateEquipmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmercomDisp.Data.EquipmentService.ConnectionFault), Action="http://tempuri.org/IEquipmentService/CreateEquipmentConnectionFaultFault", Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/EmercomDisp.Service.Dto.Models")]
        void CreateEquipment(EmercomDisp.Data.EquipmentService.EquipmentDto equipment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/CreateEquipment", ReplyAction="http://tempuri.org/IEquipmentService/CreateEquipmentResponse")]
        System.Threading.Tasks.Task CreateEquipmentAsync(EmercomDisp.Data.EquipmentService.EquipmentDto equipment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/UpdateEquipment", ReplyAction="http://tempuri.org/IEquipmentService/UpdateEquipmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmercomDisp.Data.EquipmentService.ConnectionFault), Action="http://tempuri.org/IEquipmentService/UpdateEquipmentConnectionFaultFault", Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/EmercomDisp.Service.Dto.Models")]
        void UpdateEquipment(EmercomDisp.Data.EquipmentService.EquipmentDto equipment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/UpdateEquipment", ReplyAction="http://tempuri.org/IEquipmentService/UpdateEquipmentResponse")]
        System.Threading.Tasks.Task UpdateEquipmentAsync(EmercomDisp.Data.EquipmentService.EquipmentDto equipment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/DeleteEquipment", ReplyAction="http://tempuri.org/IEquipmentService/DeleteEquipmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EmercomDisp.Data.EquipmentService.ConnectionFault), Action="http://tempuri.org/IEquipmentService/DeleteEquipmentConnectionFaultFault", Name="ConnectionFault", Namespace="http://schemas.datacontract.org/2004/07/EmercomDisp.Service.Dto.Models")]
        void DeleteEquipment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEquipmentService/DeleteEquipment", ReplyAction="http://tempuri.org/IEquipmentService/DeleteEquipmentResponse")]
        System.Threading.Tasks.Task DeleteEquipmentAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEquipmentServiceChannel : EmercomDisp.Data.EquipmentService.IEquipmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EquipmentServiceClient : System.ServiceModel.ClientBase<EmercomDisp.Data.EquipmentService.IEquipmentService>, EmercomDisp.Data.EquipmentService.IEquipmentService {
        
        public EquipmentServiceClient() {
        }
        
        public EquipmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EquipmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EquipmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EquipmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EmercomDisp.Data.EquipmentService.EquipmentDto[] GetEquipment() {
            return base.Channel.GetEquipment();
        }
        
        public System.Threading.Tasks.Task<EmercomDisp.Data.EquipmentService.EquipmentDto[]> GetEquipmentAsync() {
            return base.Channel.GetEquipmentAsync();
        }
        
        public EmercomDisp.Data.EquipmentService.EquipmentDto GetEquipmentById(int id) {
            return base.Channel.GetEquipmentById(id);
        }
        
        public System.Threading.Tasks.Task<EmercomDisp.Data.EquipmentService.EquipmentDto> GetEquipmentByIdAsync(int id) {
            return base.Channel.GetEquipmentByIdAsync(id);
        }
        
        public void CreateEquipment(EmercomDisp.Data.EquipmentService.EquipmentDto equipment) {
            base.Channel.CreateEquipment(equipment);
        }
        
        public System.Threading.Tasks.Task CreateEquipmentAsync(EmercomDisp.Data.EquipmentService.EquipmentDto equipment) {
            return base.Channel.CreateEquipmentAsync(equipment);
        }
        
        public void UpdateEquipment(EmercomDisp.Data.EquipmentService.EquipmentDto equipment) {
            base.Channel.UpdateEquipment(equipment);
        }
        
        public System.Threading.Tasks.Task UpdateEquipmentAsync(EmercomDisp.Data.EquipmentService.EquipmentDto equipment) {
            return base.Channel.UpdateEquipmentAsync(equipment);
        }
        
        public void DeleteEquipment(int id) {
            base.Channel.DeleteEquipment(id);
        }
        
        public System.Threading.Tasks.Task DeleteEquipmentAsync(int id) {
            return base.Channel.DeleteEquipmentAsync(id);
        }
    }
}
